ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey90", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey90', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey90", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey60', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey60", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey60', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey50", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey50', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey50', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey70", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey75", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +  # Ensure fill colors for the ribbon
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
Spring.plot
Summer.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Summer"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Summer, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Summer, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Summer") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
###### Summer
Summer <- new_data %>% filter(Season == "Summer")
Summer.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Summer"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Summer, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Summer, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Summer") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
###### Autumn
Autumn <- new_data %>% filter(Season == "Autumn")
Autumn.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Autumn"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
xlab(expression(T[b~Predict])) +
ylab(NULL) +  # Remove Y-axis label
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Autumn, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Autumn, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Autumn") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())   # Remove minor grid lines
Autumn.plot
your_data
###### Winter
Winter <- new_data %>%
filter(Season == "Winter")
Winter.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Winter"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21), labels = c("Female", "Male")) +
scale_color_manual(values = c("black", "grey50"), labels = c("Female", "Male")) +
scale_fill_manual(values = c("black", "grey30")) +  # Ensure fill colors for the ribbon
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Winter, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Winter, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Winter") +
theme(
text = element_text(size = 16),
legend.position = c(0.94, 0.98),  # Position legend inside the plot area
legend.justification = c(1, 1),  # Adjust legend justification
legend.background = element_rect(fill = "transparent", color = NA),  # Make legend background transparent
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())+   # Remove minor grid lines
guides(shape = guide_legend(title = "Sex"),
color = guide_legend(title = "Sex"),
fill = "none")  # Remove the fill legend
Winter.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Winter"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21), labels = c("Female", "Male")) +
scale_color_manual(values = c( "grey65", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Winter, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Winter, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Winter") +
theme(
text = element_text(size = 16),
legend.position = c(0.94, 0.98),  # Position legend inside the plot area
legend.justification = c(1, 1),  # Adjust legend justification
legend.background = element_rect(fill = "transparent", color = NA),  # Make legend background transparent
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())+   # Remove minor grid lines
guides(shape = guide_legend(title = "Sex"),
color = guide_legend(title = "Sex"),
fill = "none")  # Remove the fill legend
p<- cowplot::plot_grid(Spring.plot, Summer.plot, Autumn.plot, Winter.plot, ncol=4)
p
Winter.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Winter"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21), labels = c("Female", "Male")) +
scale_color_manual(values = c( "grey1", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Winter, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Winter, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Winter") +
theme(
text = element_text(size = 16),
legend.position = c(0.94, 0.98),  # Position legend inside the plot area
legend.justification = c(1, 1),  # Adjust legend justification
legend.background = element_rect(fill = "transparent", color = NA),  # Make legend background transparent
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())+   # Remove minor grid lines
guides(shape = guide_legend(title = "Sex"),
color = guide_legend(title = "Sex"),
fill = "none")  # Remove the fill legend
Winter.plot
Winter.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Winter"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21), labels = c("Female", "Male")) +
scale_color_manual(values = c( "grey55", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Winter, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Winter, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Winter") +
theme(
text = element_text(size = 16),
legend.position = c(0.94, 0.98),  # Position legend inside the plot area
legend.justification = c(1, 1),  # Adjust legend justification
legend.background = element_rect(fill = "transparent", color = NA),  # Make legend background transparent
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())+   # Remove minor grid lines
guides(shape = guide_legend(title = "Sex"),
color = guide_legend(title = "Sex"),
fill = "none")  # Remove the fill legend
setwd("~/Dropbox/RWorkingDirectory/TPC_Survival/R")
##### TPC data
# Step 1: Read and Filter Data
your_data <- readRDS(file = "Final.Analysis/Final.Figure.data/data.temp.gam.analysis.rds") %>%
filter(Sex != 'ZZf')
# Step 2: Fit the GAM Model
gam_model <- readRDS(file = "Models/Season.Sex.Interaction.Povi.rds")
# Step 3: Create a Data Frame for Prediction
representative_povi <- unique(your_data$POVI)[1]  # Use the first level, adjust as needed
new_data <- expand.grid(
temp = seq(min(your_data$temp), max(your_data$temp), length.out = 100),
Season = unique(your_data$Season),
Sex = unique(your_data$Sex),  # Ensure this matches the filtered data
POVI = representative_povi  # Include the representative POVI level
)
# Step 4: Drop Unused Factor Levels
new_data$Sex <- factor(new_data$Sex, levels = levels(your_data$Sex))
# Step 5: Make Predictions and Calculate Standard Errors
pred <- predict(gam_model, newdata = new_data, type = "link", se.fit = TRUE)
new_data$predicted <- pred$fit
new_data$se <- pred$se.fit
new_data <- new_data %>%
mutate(
lower = predicted - se,
upper = predicted + se
)
# SPRING
Spring <- new_data %>% filter(Season == "Spring")
Spring.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Spring"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey55", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(bquote("95th"~"percentile"~"of"~"acceleration ms"^-2)) +
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Spring, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Spring, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Spring") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
###### Summer
Summer <- new_data %>% filter(Season == "Summer")
Summer.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Summer"), aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey55", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Summer, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Summer, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Summer") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())
###### Autumn
Autumn <- new_data %>% filter(Season == "Autumn")
Autumn.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Autumn"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21)) +
scale_color_manual(values = c( "grey55", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
xlab(expression(T[b~Predict])) +
ylab(NULL) +  # Remove Y-axis label
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Autumn, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Autumn, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Autumn") +
theme(legend.position = "none",
text = element_text(size = 16),
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())   # Remove minor grid lines
###### Winter
Winter <- new_data %>%
filter(Season == "Winter")
Winter.plot <- ggplot() +
geom_point(data = your_data %>% filter(Season == "Winter"),
aes(x = temp, y = percent95.ms2, shape = Sex, color = Sex), size = 2) +
scale_shape_manual(values = c(17, 21), labels = c("Female", "Male")) +
scale_color_manual(values = c( "grey55", "black"), labels = c("Female", "Male")) +
scale_fill_manual(values = c('grey70', "black")) +
ylab(NULL) +  # Remove Y-axis label
xlab(expression(T[b~Predict])) +
coord_cartesian(xlim = c(5, 50), ylim = c(0, 1.8)) +
scale_x_continuous(breaks = seq(0, 50, 5)) +
scale_y_continuous(breaks = seq(0, 1.8, .2)) +
geom_ribbon(data = Winter, aes(x = temp, ymin = lower, ymax = upper, fill = Sex), alpha = 0.2) +
geom_line(data = Winter, aes(x = temp, y = predicted, color = Sex), size = 1) +  # Set the line size for better visibility
theme_bw() +
ggtitle("Winter") +
theme(
text = element_text(size = 16),
legend.position = c(0.94, 0.98),  # Position legend inside the plot area
legend.justification = c(1, 1),  # Adjust legend justification
legend.background = element_rect(fill = "transparent", color = NA),  # Make legend background transparent
plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank())+   # Remove minor grid lines
guides(shape = guide_legend(title = "Sex"),
color = guide_legend(title = "Sex"),
fill = "none")  # Remove the fill legend
p<- cowplot::plot_grid(Spring.plot, Summer.plot, Autumn.plot, Winter.plot, ncol=4)
p
# read models
Temp <- readRDS(file = "R/Models/Temp.rds")
pacman::p_load("dplyr", "tidyverse", "lubridate", "ggplot2", "plotly", "pbapply","car", "readr", "lmerTest", "emmeans", "AICcmodavg", "nls.multstart", "broom", "purrr", "plotrix", "AICcmodavg", "MuMIn", "stargazer", "jtools", "huxtable", "officer", "grid", "png", "rTPC", "nls.multstart", "ggrepel", "mgcv", "gratia", "lmerTest","performance")
######################################################################################
############################  (1) TSET by sex - LAB ###################################
######################################################################################
# import data
Tsel <- read.csv(file = "R/Raw_data/Final_TselTb_file.csv" ) %>%
mutate(temp = mean_temp) %>%
filter(Sex != "ZZf")
setwd("~/Dropbox/RWorkingDirectory/TPC_Survival")
# read models
Temp <- readRDS(file = "R/Models/Temp.rds")
Temp.Povi <- readRDS(file = "R/Models/Temp.Povi.rds")
Sex <- readRDS(file = "R/Models/Sex.rds")
Sex.Povi <- readRDS(file = "R/Models/Sex.Povi.rds")
Season <- readRDS(file = "R/Models/Season.rds")
Season.Povi <- readRDS(file = "R/Models/Season.Povi.rds")
Season.Sex <- readRDS(file = "R/Models/Season.Sex.rds")
Season.Sex.Povi <- readRDS(file = "R/Models/Season.Sex.Povi.rds")
Season.Sex.Interaction <- readRDS(file = "R/Models/Season.Sex.Interaction.rds")
Season.Sex.Interaction.Povi <- readRDS(file = "R/Models/Season.Sex.Interaction.Povi.rds")
############################
## 3)  GAMM Model - CHECKS
summary(Temp)  #  % of deviance -- POVI as random effect
summary(Temp.Povi) # % of deviance -- with POVI as random, and fitted curve by POVI, no fixed effects
summary(Sex) # % of deviance -- with POVI as random, sex as fixed factors and Sex fitted
summary(Sex.Povi) # % of deviance -- with POVI as random, sex as fixed factors and fitted curve by POVI
summary(Season) # % of deviance -- with POVI as random, season as fixed factors and season fitted
summary(Season.Povi) #  % with POVI as random, season as fixed factors and fitted curve by POVI
summary(Season.Sex)  #  % of deviance --   with POVI as random, Sex and fitted curve by temp
summary(Season.Sex.Povi) #  % of deviance --  with POVI as random, Sexand fitted curve by POVI
summary(Season.Sex.Interaction) #  % of deviance --  with POVI as random, Sex, season, and interaction and fitted curve by temp
summary(Season.Sex.Interaction.Povi) #  % of deviance --  with POVI as random, Sex, season, and interaction and fitted curve by ID
gam.check(Temp)
gam.check(Season.Sex.Interaction.Povi)
############################################################################
########################## (8) GAM(M) ANLAYSIS #############################
############################################################################
# arranging datra for model
pref.95 <- readRDS(file = "R/Final.Analysis/Final.Figure.data/GAMM.data.RDS")
pref.95
